// ==========================================================
//  CSS Grid Mixins (take one)
// ==========================================================

//
//  repeat function
//
@function repeat($repeat, $stuff: 1fr)
    $list: ()
    @for $i from 1 through $repeat  $list: append($list, $stuff, space) 
    @return $list


//
//  grid-column mixin 
//
=grid-column($start: auto, $span: 1)
    grid-column: #$start/#$start + $span 
    @content


//
//  grid-row mixin
//
=grid-row($start: auto, $span: 1)
    grid-row: #$start/#$start + $span
    @content    


//
//  grid-cell mixin
//
=grid-cell($col-start: auto, $col-span: 1, $row-start: auto, $row-span: 1)
    @include grid-column($col-start, $col-span)
    @include grid-row($row-start, $row-span) 
    @content    


//
//  grid-area mixin 
//
=grid-area($area)
    $area: map-get($grid-areas, $area)
    @include grid-column(nth($area, 1), nth($area, 2))
    @include grid-row(nth($area, 3), nth($area, 4))  
    @content

//
//  grid mixin 
//
=grid($grid-map)
    $cols: map-get($grid-map, cols)
    $rows: map-get($grid-map, rows)    
    $gap:  map-get($grid-map, gap)    
    $col-gap:  map-get($grid-map, col-gap)        
    $col-gap: if($col-gap,$col-gap,$gap)
    $row-gap:  map-get($grid-map, row-gap)
    $row-gap: if($row-gap,$row-gap,$gap)    


    //  if cols or rows are numbers convert to fraction lists
    @if $cols and length($cols) == 1 and unitless($cols)  $cols: repeat($cols) 
    @if $rows and length($rows) == 1 and unitless($rows)  $rows: repeat($rows)     
    
    //  ie does not support grid gap - why we insert the gap space as a row or colum
    //  note! the first loop is to ensure cols/rows are not a multidimensional list
    //  (when generated by the repeat function) 
    $ms-cols: null
    $ms-rows: null    
    @if $col-gap and $cols 
        $ms-cols: ()
        @each $col in $cols  $ms-cols: if( type-of($col) == list, join($ms-cols, $col), append($ms-cols, $col)) 
        @for $i from 1 through length($ms-cols) - 1 $ms-cols: set-nth($ms-cols, $i, nth($ms-cols,$i) $col-gap)  
        //  globalize ms col count (used by grid-column)
        $☠__ms-col-count: length($ms-cols) !global        
    
    @if $row-gap and $rows 
        $ms-rows: ()        
        @each $row in $rows  $ms-rows: if( type-of($row) == list, join($ms-rows, $row), append($ms-rows, $row)) 
        @for $i from 1 through length($ms-rows) - 1  $ms-rows: set-nth($ms-rows, $i, nth($ms-rows,$i) $row-gap) 

        //  globalize ms row count (used by grid-row)
        $☠__ms-row-count: length($ms-rows) !global
    
    // 
    $☠__ms-col-gap: $col-gap !global
    $☠__ms-row-gap: $row-gap !global


    display: -ms-grid    
    display: grid

    -ms-grid-columns: $ms-cols or $cols
    -ms-grid-rows: $ms-rows or $rows    

    grid-template-columns: $cols
    grid-template-rows: $rows    

    grid-column-gap: $col-gap
    grid-row-gap: $row-gap    
    @content
